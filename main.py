"""
Telegram Bitcoin Shop Bot
–¢—Ä–µ–±—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: 
pip install python-bitcoinrpc aiogram psycopg2 requests python-dotenv
"""

import os
import logging
import asyncio
from decimal import Decimal
from datetime import datetime
from typing import List, Dict, Optional

import psycopg2
from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException
from bitcoinutils.setup import setup
from bitcoinutils.hdwallet import HDWallet
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    BITCOIN_RPC = {
        'user': os.getenv("BTC_RPC_USER"),
        'password': os.getenv("BTC_RPC_PASS"),
        'host': 'localhost',
        'port': 8332
    }
    DB_CONFIG = {
        'dbname': os.getenv("DB_NAME"),
        'user': os.getenv("DB_USER"),
        'password': os.getenv("DB_PASS"),
        'host': os.getenv("DB_HOST")
    }
    WALLET_SEED = os.getenv("WALLET_SEED")
    ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(',')))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=Config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
setup('mainnet')

# --- –†–∞–±–æ—Ç–∞ —Å Bitcoin ---
class BitcoinManager:
    def __init__(self):
        self.rpc = AuthServiceProxy(
            f"http://{Config.BITCOIN_RPC['user']}:{Config.BITCOIN_RPC['password']}"
            f"@{Config.BITCOIN_RPC['host']}:{Config.BITCOIN_RPC['port']}"
        )
        self.wallet = HDWallet.from_seed(Config.WALLET_SEED)

    def get_new_address(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        path = f"m/44'/0'/0'/0/{user_id}"
        self.wallet.from_path(path)
        return self.wallet.get_address().to_string()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
class Database:
    def __init__(self):
        self.conn = psycopg2.connect(**Config.DB_CONFIG)
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü"""
        with self.conn.cursor() as cur:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    address TEXT NOT NULL,
                    balance DECIMAL DEFAULT 0
                )""")
            
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            cur.execute("""
                CREATE TABLE IF NOT EXISTS invoices (
                    txid TEXT PRIMARY KEY,
                    user_id BIGINT,
                    amount DECIMAL,
                    confirmations INT,
                    timestamp TIMESTAMP
                )""")
            
            # –¢–æ–≤–∞—Ä—ã
            cur.execute("""
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY,
                    category TEXT,
                    name TEXT,
                    price_rub DECIMAL,
                    description TEXT
                )""")
            
            # –ü—Ä–æ–º–æ–∫–æ–¥—ã
            cur.execute("""
                CREATE TABLE IF NOT EXISTS promocodes (
                    code TEXT PRIMARY KEY,
                    product_id INT,
                    used BOOLEAN DEFAULT FALSE
                )""")
            
            # –ü–æ–∫—É–ø–∫–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS purchases (
                    user_id BIGINT,
                    product_id INT,
                    code TEXT,
                    timestamp TIMESTAMP
                )""")
            self.conn.commit()

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
    def create_user(self, user_id: int, address: str):
        with self.conn.cursor() as cur:
            cur.execute(
                "INSERT INTO users (user_id, address) VALUES (%s, %s)",
                (user_id, address)
            self.conn.commit()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(Command('start'))
async def cmd_start(message: types.Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    btc = BitcoinManager()
    address = btc.get_new_address(user_id)
    
    db = Database()
    db.create_user(user_id, address)
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: `{address}`\n"
        "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ 2 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ —Å–µ—Ç–∏ Bitcoin.",
        parse_mode="Markdown")

# --- –ü–æ–ª–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ---
